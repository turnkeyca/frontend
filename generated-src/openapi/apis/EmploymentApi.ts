// tslint:disable
/**
 * of Turnkey API
 * Documentation for Turnkey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    EmploymentDto,
    GenericError,
    ValidationError,
} from '../models';

export interface CreateEmploymentRequest {
    body: EmploymentDto;
}

export interface DeleteEmploymentRequest {
    id: string;
}

export interface GetEmploymentRequest {
    id: string;
}

export interface GetEmploymentsByUserIdRequest {
    userId: string;
}

export interface UpdateEmploymentRequest {
    id: string;
    body: EmploymentDto;
}

/**
 * no description
 */
export class EmploymentApi extends BaseAPI {

    /**
     * create a new employment
     */
    createEmployment({ body }: CreateEmploymentRequest): Observable<void>
    createEmployment({ body }: CreateEmploymentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    createEmployment({ body }: CreateEmploymentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(body, 'body', 'createEmployment');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/employment',
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * delete a employment
     */
    deleteEmployment({ id }: DeleteEmploymentRequest): Observable<void>
    deleteEmployment({ id }: DeleteEmploymentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteEmployment({ id }: DeleteEmploymentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteEmployment');

        return this.request<void>({
            url: '/api/employment/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * return an employment
     */
    getEmployment({ id }: GetEmploymentRequest): Observable<EmploymentDto>
    getEmployment({ id }: GetEmploymentRequest, opts?: OperationOpts): Observable<RawAjaxResponse<EmploymentDto>>
    getEmployment({ id }: GetEmploymentRequest, opts?: OperationOpts): Observable<EmploymentDto | RawAjaxResponse<EmploymentDto>> {
        throwIfNullOrUndefined(id, 'id', 'getEmployment');

        return this.request<EmploymentDto>({
            url: '/api/employment/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * return employments for a user
     */
    getEmploymentsByUserId({ userId }: GetEmploymentsByUserIdRequest): Observable<Array<EmploymentDto>>
    getEmploymentsByUserId({ userId }: GetEmploymentsByUserIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<EmploymentDto>>>
    getEmploymentsByUserId({ userId }: GetEmploymentsByUserIdRequest, opts?: OperationOpts): Observable<Array<EmploymentDto> | RawAjaxResponse<Array<EmploymentDto>>> {
        throwIfNullOrUndefined(userId, 'userId', 'getEmploymentsByUserId');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'userId': userId,
        };

        return this.request<Array<EmploymentDto>>({
            url: '/api/employment',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * update a employment
     */
    updateEmployment({ id, body }: UpdateEmploymentRequest): Observable<void>
    updateEmployment({ id, body }: UpdateEmploymentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateEmployment({ id, body }: UpdateEmploymentRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'updateEmployment');
        throwIfNullOrUndefined(body, 'body', 'updateEmployment');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/employment/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

}
