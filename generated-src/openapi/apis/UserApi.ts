// tslint:disable
/**
 * of Turnkey API
 * Documentation for Turnkey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    GenericError,
    UserDto,
    ValidationError,
} from '../models';

export interface CreateUserRequest {
    body: UserDto;
}

export interface DeleteUserRequest {
    id: string;
}

export interface GetUserRequest {
    id: string;
}

export interface UpdateUserRequest {
    id: string;
    body: UserDto;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {

    /**
     * create a new user
     */
    createUser({ body }: CreateUserRequest): Observable<void>
    createUser({ body }: CreateUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    createUser({ body }: CreateUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(body, 'body', 'createUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/user',
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * delete a user
     */
    deleteUser({ id }: DeleteUserRequest): Observable<void>
    deleteUser({ id }: DeleteUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteUser({ id }: DeleteUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteUser');

        return this.request<void>({
            url: '/api/user/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * return a user
     */
    getUser({ id }: GetUserRequest): Observable<UserDto>
    getUser({ id }: GetUserRequest, opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>
    getUser({ id }: GetUserRequest, opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
        throwIfNullOrUndefined(id, 'id', 'getUser');

        return this.request<UserDto>({
            url: '/api/user/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * update a user
     */
    updateUser({ id, body }: UpdateUserRequest): Observable<void>
    updateUser({ id, body }: UpdateUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateUser({ id, body }: UpdateUserRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'updateUser');
        throwIfNullOrUndefined(body, 'body', 'updateUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/user/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

}
