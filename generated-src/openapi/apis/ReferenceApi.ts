// tslint:disable
/**
 * of Turnkey API
 * Documentation for Turnkey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    GenericError,
    ReferenceDto,
    ValidationError,
} from '../models';

export interface CreateReferenceRequest {
    token: string;
    body: ReferenceDto;
}

export interface DeleteReferenceRequest {
    id: string;
    token: string;
}

export interface GetReferenceRequest {
    id: string;
    token: string;
}

export interface GetReferencesByUserIdRequest {
    userId: string;
    token: string;
}

export interface UpdateReferenceRequest {
    id: string;
    token: string;
    body: ReferenceDto;
}

/**
 * no description
 */
export class ReferenceApi extends BaseAPI {

    /**
     * create a new reference
     */
    createReference({ token, body }: CreateReferenceRequest): Observable<void>
    createReference({ token, body }: CreateReferenceRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    createReference({ token, body }: CreateReferenceRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(token, 'token', 'createReference');
        throwIfNullOrUndefined(body, 'body', 'createReference');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(token != null ? { 'Token': String(token) } : undefined),
        };

        return this.request<void>({
            url: '/v1/reference',
            method: 'POST',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

    /**
     * delete a reference
     */
    deleteReference({ id, token }: DeleteReferenceRequest): Observable<void>
    deleteReference({ id, token }: DeleteReferenceRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    deleteReference({ id, token }: DeleteReferenceRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'deleteReference');
        throwIfNullOrUndefined(token, 'token', 'deleteReference');

        const headers: HttpHeaders = {
            ...(token != null ? { 'Token': String(token) } : undefined),
        };

        return this.request<void>({
            url: '/v1/reference/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * return a reference
     */
    getReference({ id, token }: GetReferenceRequest): Observable<ReferenceDto>
    getReference({ id, token }: GetReferenceRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ReferenceDto>>
    getReference({ id, token }: GetReferenceRequest, opts?: OperationOpts): Observable<ReferenceDto | RawAjaxResponse<ReferenceDto>> {
        throwIfNullOrUndefined(id, 'id', 'getReference');
        throwIfNullOrUndefined(token, 'token', 'getReference');

        const headers: HttpHeaders = {
            ...(token != null ? { 'Token': String(token) } : undefined),
        };

        return this.request<ReferenceDto>({
            url: '/v1/reference/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * return all references ofr a user
     */
    getReferencesByUserId({ userId, token }: GetReferencesByUserIdRequest): Observable<Array<ReferenceDto>>
    getReferencesByUserId({ userId, token }: GetReferencesByUserIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<ReferenceDto>>>
    getReferencesByUserId({ userId, token }: GetReferencesByUserIdRequest, opts?: OperationOpts): Observable<Array<ReferenceDto> | RawAjaxResponse<Array<ReferenceDto>>> {
        throwIfNullOrUndefined(userId, 'userId', 'getReferencesByUserId');
        throwIfNullOrUndefined(token, 'token', 'getReferencesByUserId');

        const headers: HttpHeaders = {
            ...(token != null ? { 'Token': String(token) } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'userId': userId,
        };

        return this.request<Array<ReferenceDto>>({
            url: '/v1/reference',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * update a reference
     */
    updateReference({ id, token, body }: UpdateReferenceRequest): Observable<void>
    updateReference({ id, token, body }: UpdateReferenceRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    updateReference({ id, token, body }: UpdateReferenceRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'updateReference');
        throwIfNullOrUndefined(token, 'token', 'updateReference');
        throwIfNullOrUndefined(body, 'body', 'updateReference');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(token != null ? { 'Token': String(token) } : undefined),
        };

        return this.request<void>({
            url: '/v1/reference/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: body,
        }, opts?.responseOpts);
    };

}
